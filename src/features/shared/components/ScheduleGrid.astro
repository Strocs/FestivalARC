---
import type { GridData } from '@/features/schedule'

interface Props {
  gridData: GridData
}

const { gridData } = Astro.props
const { timeSlots, categories, rows } = gridData
---

<div class="w-full overflow-x-auto py-4">
  <div class="grid gap-2 min-w-[800px]" style={`grid-template-columns: 120px repeat(${timeSlots.length}, minmax(100px, 1fr));`}>
    <div class="p-3 bg-[#170d19] text-white font-bold text-center rounded-lg flex items-center justify-center text-sm">
      Escenario / Hora
    </div>
    
    {timeSlots.map(slot => (
      <div class="p-3 bg-[#170d19] text-white font-bold text-center rounded-lg flex items-center justify-center">
        {slot}
      </div>
    ))}

    {rows.map(row => {
      const category = categories.find(c => c.id === row.categoryId)!
      
      return (
        <>
          <div class="p-3 text-white font-bold text-center rounded-lg flex items-center justify-center" style={`background: ${category.color}`}>
            {category.name}
          </div>
          
          {row.cells.map(cell => {
            if (cell.type === 'event') {
              const event = cell.data
              return (
                <div 
                  class="border-2 min-h-20 p-3 rounded-lg bg-white" 
                  style={`border-color: ${category.color}; ${cell.gridColumn}`}
                >
                  <div class="h-full flex flex-col gap-2">
                    <h3 class="text-lg font-bold m-0 text-[#170d19]">{event.title}</h3>
                    <p class="text-sm text-gray-600 m-0">{event.description}</p>
                    <p class="text-xs text-gray-400 m-0 font-semibold">{event.startTime} - {event.endTime}</p>
                  </div>
                </div>
              )
            }
            
            return <div class="min-h-20 rounded-lg bg-gray-100"></div>
          })}
        </>
      )
    })}
  </div>
</div>
